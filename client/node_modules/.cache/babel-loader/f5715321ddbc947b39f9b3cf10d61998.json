{"ast":null,"code":"'use strict'; //Modules\n\nconst https = require('https');\n\nconst querystring = require('querystring'); //Helpers\n\n\nconst Utils = require('./helpers/utilities');\n\nconst Constants = require('./helpers/constants');\n\nconst ReturnObject = require('./helpers/ReturnObject');\n/**\n * @class CoinGecko\n * @author Mark Miscavage <markmiscavage@protonmail.com>\n * @description A Node.js wrapper for the CoinGecko API with no dependencies. For more information, visit: https://www.coingecko.com/api/docs/v3\n * @example\n *     const CoinGecko = require('coingecko-api');\n *     const CoinGeckoClient = new CoinGecko();\n * @public\n * @version 1.0.10\n * @license MIT\n * @kind class\n */\n\n\nclass CoinGecko {\n  /**\n   * @description Check API server status\n   * @function ping\n   * @returns {ReturnObject}\n   */\n  ping() {\n    const path = `/ping`;\n    return this._request(path);\n  }\n\n  /**\n   * @description Get cryptocurrency global data\n   * @function global\n   * @returns {ReturnObject}\n   */\n  global() {\n    const path = `/global`;\n    return this._request(path);\n  }\n\n  /**\n   * @description Calls related to coins\n   */\n  get coins() {\n    const pathPrefix = 'coins';\n    return {\n      /**\n       * @description List all coins with data (name, price, market, developer, community, etc) - paginated by 50\n       * @function coins.all()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} params.order - Order results by CoinGecko.ORDER[*]\n       * @param {number} params.per_page - Total results per page\n       * @param {number} params.page - Page through results\n       * @param {boolean} params.localization [default: true] - Set to false to exclude localized languages in response\n       * @param {boolean} params.sparkline [default: false] - Include sparkline 7 days data\n       * @returns {ReturnObject}\n       */\n      all: (params = {}) => {\n        const path = `/${pathPrefix}`;\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Use this to obtain all the coins’ id in order to make API calls\n       * @function coins.list()\n       * @returns {ReturnObject}\n       */\n      list: () => {\n        const path = `/${pathPrefix}/list`;\n        return this._request(path);\n      },\n\n      /**\n       * @description Use this to obtain all the coins market data (price, market cap, volume)\n       * @function coins.markets()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} params.vs_currency [default: usd] - The target currency of market data (usd, eur, jpy, etc.)\n       * @param {array|string} params.ids - List of coin id to filter if you want specific results\n       * @param {string} params.order - Order results by CoinGecko.ORDER[*]\n       * @param {number} params.per_page - Total results per page\n       * @param {number} params.page - Page through results\n       * @param {boolean} params.sparkline [default: false] - Include sparkline 7 days data (true/false)\n       * @returns {ReturnObject}\n       */\n      markets: (params = {}) => {\n        const path = `/${pathPrefix}/markets`; //Must be object\n\n        if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object'); //If no params.vs_currency, set to default: 'usd'\n\n        if (!Utils.isString(params['vs_currency']) || Utils.isStringEmpty(params['vs_currency'])) {\n          params.vs_currency = 'usd';\n        } //Check the params.ids\n        //If is string, ok. If is array, convert to string\n\n\n        if (Utils.isArray(params['ids'])) {\n          params.ids = params.ids.join(',');\n        }\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Get current data (name, price, market, … including exchange tickers) for a coin.\n       * @function coins.fetch()\n       * @param {string} coinId - (Required) The coin id (can be obtained from coins.list()) eg. bitcoin\n       * @param {object} params - Parameters to pass through to the request\n       * @param {boolean} params.tickers [default: true] - Include ticker data\n       * @param {boolean} params.market_data [default: true] - Include market data\n       * @param {boolean} params.community_data [default: true] - Include community data\n       * @param {boolean} params.developer_data [default: true] - Include developer data\n       * @param {boolean} params.localization [default: true] - Set to false to exclude localized languages in response\n       * @param {boolean} params.sparkline [default: false] - Include sparkline 7 days data (true/false)\n       * @returns {ReturnObject}\n       */\n      fetch: (coinId, params = {}) => {\n        //Must have coinId\n        if (!Utils.isString(coinId) || Utils.isStringEmpty(coinId)) Utils._WARN_('Invalid parameter', 'coinId must be of type: String and greater than 0 characters.');\n        const path = `/${pathPrefix}/${coinId}`;\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Get coin tickers (paginated to 100 items).\n       * @function coins.fetchTickers()\n       * @param {string} coinId - (Required) The coin id (can be obtained from coins.list()) eg. bitcoin\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} params.page - Page through results\n       * @param {number} params.exchange_ids - Filter tickers by exchange_ids\n       * @param {string} params.order [default: trust_score_desc] - Order results by CoinGecko.ORDER.TRUST_SCORE_DESC or CoinGecko.ORDER.VOLUME_DESC\n       * @returns {ReturnObject}\n       */\n      fetchTickers: (coinId, params = {}) => {\n        //Must have coinId\n        if (!Utils.isString(coinId) || Utils.isStringEmpty(coinId)) Utils._WARN_('Invalid parameter', 'coinId must be of type: String and greater than 0 characters.'); //Convert array to string\n\n        if (Utils.isArray(params['exchange_ids'])) {\n          params.exchange_ids = params.exchange_ids.join(',');\n        }\n\n        const path = `/${pathPrefix}/${coinId}/tickers`;\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Get historical data (name, price, market, stats) at a given date for a coin\n       * @function coins.fetchHistory()\n       * @param {string} coinId - (Required) The coin id (can be obtained from coins.list()) eg. bitcoin\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} params.date - (Required) The date of data snapshot in dd-mm-yyyy eg. 30-12-2017\n       * @param {boolean} params.localization [default: true] - Set to false to exclude localized languages in response\n       * @returns {ReturnObject}\n       */\n      fetchHistory: (coinId, params = {}) => {\n        //Must have coinId\n        if (!Utils.isString(coinId) || Utils.isStringEmpty(coinId)) Utils._WARN_('Invalid parameter', 'coinId must be of type: String and greater than 0 characters.'); //Must be object\n\n        if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object'); //If no params.date, set to default today/now\n\n        if (!Utils.isString(params['date']) || Utils.isStringEmpty(params['date'])) Utils._WARN_('Missing parameter', 'params must include `date` and be a string in format: `dd-mm-yyyy`');\n        const path = `/${pathPrefix}/${coinId}/history`;\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Get historical market data include price, market cap, and 24h volume (granularity auto)\n       * @function coins.fetchMarketChart()\n       * @param {string} coinId - (Required) The coin id (can be obtained from coins.list()) eg. bitcoin\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} params.vs_currency [default: usd] - (Required) The target currency of market data (usd, eur, jpy, etc.)\n       * @param {string} params.days [default: 1] - (Required) Data up to number of days ago (eg. 1,14,30,max)\n       * @returns {ReturnObject}\n       */\n      fetchMarketChart: (coinId, params = {}) => {\n        //Must have coinId\n        if (!Utils.isString(coinId) || Utils.isStringEmpty(coinId)) Utils._WARN_('Invalid parameter', 'coinId must be of type: String and greater than 0 characters.'); //Must be object\n\n        if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object'); //If no params.vs_currency, set to default: 'usd'\n\n        if (!Utils.isString(params['vs_currency']) || Utils.isStringEmpty(params['vs_currency'])) {\n          params.vs_currency = 'usd';\n        } //If no params.days, set to default: 1\n\n\n        if (params['days'] == undefined) {\n          params.days = 1;\n        }\n\n        const path = `/${pathPrefix}/${coinId}/market_chart`;\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Get historical market data include price, market cap, and 24h volume within a range of timestamp (granularity auto).\n       *   Minutely data will be used for duration within 1 day.\n       *   Hourly data will be used for duration between 1 day and 90 days.\n       *   Daily data will be used for duration above 90 days.\n       * @function coins.fetchMarketChartRange()\n       * @param {string} coinId - (Required) The coin id (can be obtained from coins.list()) eg. bitcoin\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} params.vs_currency [default: usd] - (Required) The target currency of market data (usd, eur, jpy, etc.)\n       * @param {number} params.from - (Required) From date in UNIX Timestamp (eg. 1392577232)\n       * @param {number} params.to - (Required) To date in UNIX Timestamp (eg. 1422577232)\n       * @returns {ReturnObject}\n       */\n      fetchMarketChartRange: (coinId, params = {}) => {\n        //Must have coinId\n        if (!Utils.isString(coinId) || Utils.isStringEmpty(coinId)) Utils._WARN_('Invalid parameter', 'coinId must be of type: String and greater than 0 characters.'); //Must be object\n\n        if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object'); //If no params.vs_currency, set to default: 'usd'\n\n        if (!Utils.isString(params['vs_currency']) || Utils.isStringEmpty(params['vs_currency'])) {\n          params.vs_currency = 'usd';\n        }\n\n        if (!Utils.isNumber(params['from'])) Utils._WARN_('Missing parameter', 'params must include `from` and be a UNIX timestamp.');\n        if (!Utils.isNumber(params['to'])) Utils._WARN_('Missing parameter', 'params must include `to` and be a UNIX timestamp.');\n        const path = `/${pathPrefix}/${coinId}/market_chart/range`;\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Get status updates for a given coin\n       * @function coins.fetchStatusUpdates()\n       * @param {string} coinId - (Required) The coin id (can be obtained from coins.list()) eg. bitcoin\n       * @param {object} params - Parameters to pass through to the request\n       * @param {number} params.per_page - Total results per page\n       * @param {number} params.page - Page through results\n       * @returns {ReturnObject}\n       */\n      fetchStatusUpdates: (coinId, params = {}) => {\n        //Must have coinId\n        if (!Utils.isString(coinId) || Utils.isStringEmpty(coinId)) Utils._WARN_('Invalid parameter', 'coinId must be of type: String and greater than 0 characters.');\n        const path = `/${pathPrefix}/${coinId}/status_updates`;\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Get coin info from contract address\n       * @function coins.fetchCoinContractInfo()\n       * @param {object} contractAddress - (Required) Token’s contract address\n       * @param {string} assetPlatform [default: ethereum] - (Required) Asset platform (only ethereum is supported at this moment)\n       * @returns {ReturnObject}\n       */\n      fetchCoinContractInfo: (contractAddress, assetPlatform = 'ethereum') => {\n        //Must have contractAddress, assetPlatform\n        if (!Utils.isString(contractAddress) || Utils.isStringEmpty(contractAddress)) Utils._WARN_('Invalid parameter', 'contractAddress must be of type: String and greater than 0 characters.');\n        if (!Utils.isString(assetPlatform) || Utils.isStringEmpty(assetPlatform)) Utils._WARN_('Invalid parameter', 'assetPlatform must be of type: String and greater than 0 characters.');\n        const path = `/${pathPrefix}/${assetPlatform}/contract/${contractAddress}`;\n        return this._request(path);\n      },\n\n      /**\n       * @description Get historical market data include price, market cap, and 24h volume (granularity auto) from a contract address\n       * @function coins.fetchCoinContractMarketChart()\n       * @param {object} contractAddress - (Required) Token’s contract address\n       * @param {string} assetPlatform [default: ethereum] - (Required) Asset platform (only ethereum is supported at this moment)\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} params.vs_currency [default: usd] - (Required) The target currency of market data (usd, eur, jpy, etc.)\n       * @param {string} params.days [default: 1] - (Required) Data up to number of days ago (eg. 1,14,30,max)\n       * @returns {ReturnObject}\n       */\n      fetchCoinContractMarketChart: (contractAddress, assetPlatform = 'ethereum', params = {}) => {\n        //Must have contractAddress, assetPlatform\n        if (!Utils.isString(contractAddress) || Utils.isStringEmpty(contractAddress)) Utils._WARN_('Invalid parameter', 'contractAddress must be of type: String and greater than 0 characters.');\n        if (!Utils.isString(assetPlatform) || Utils.isStringEmpty(assetPlatform)) Utils._WARN_('Invalid parameter', 'assetPlatform must be of type: String and greater than 0 characters.'); //Must be object\n\n        if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object'); //If no params.vs_currency, set to default: 'usd'\n\n        if (!Utils.isString(params['vs_currency']) || Utils.isStringEmpty(params['vs_currency'])) {\n          params.vs_currency = 'usd';\n        } //If no params.days, set to default: 1\n\n\n        if (params['days'] == undefined) {\n          params.days = 1;\n        }\n\n        const path = `/${pathPrefix}/${assetPlatform}/contract/${contractAddress}/market_chart`;\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Get historical market data include price, market cap, and 24h volume within a range of timestamp (granularity auto)\n       * @function coins.fetchCoinContractMarketChartRange()\n       * @param {object} contractAddress - (Required) Token’s contract address\n       * @param {string} assetPlatform [default: ethereum] - (Required) Asset platform (only ethereum is supported at this moment)\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} params.vs_currency [default: usd] - (Required) The target currency of market data (usd, eur, jpy, etc.)\n       * @param {number} params.from - (Required) From date in UNIX Timestamp (eg. 1392577232)\n       * @param {number} params.to - (Required) To date in UNIX Timestamp (eg. 1422577232)\n       * @returns {ReturnObject}\n       */\n      fetchCoinContractMarketChartRange: (contractAddress, assetPlatform = 'ethereum', params = {}) => {\n        //Must have contractAddress, assetPlatform\n        if (!Utils.isString(contractAddress) || Utils.isStringEmpty(contractAddress)) Utils._WARN_('Invalid parameter', 'contractAddress must be of type: String and greater than 0 characters.');\n        if (!Utils.isString(assetPlatform) || Utils.isStringEmpty(assetPlatform)) Utils._WARN_('Invalid parameter', 'assetPlatform must be of type: String and greater than 0 characters.'); //Must be object\n\n        if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object'); //If no params.vs_currency, set to default: 'usd'\n\n        if (!Utils.isString(params['vs_currency']) || Utils.isStringEmpty(params['vs_currency'])) {\n          params.vs_currency = 'usd';\n        } //If no params.days, set to default: 1\n\n\n        if (params['days'] == undefined) {\n          params.days = 1;\n        }\n\n        const path = `/${pathPrefix}/${assetPlatform}/contract/${contractAddress}/market_chart/range`;\n        return this._request(path, params);\n      }\n    };\n  }\n\n  /**\n   * @description Calls related to exchanges\n   */\n  get exchanges() {\n    const pathPrefix = 'exchanges';\n    return {\n      /**\n       * @description List all exchanges\n       * @function exchanges.all()\n       * @returns {ReturnObject}\n       */\n      all: () => {\n        const path = `/${pathPrefix}`;\n        return this._request(path);\n      },\n\n      /**\n       * @description List all supported markets id and name\n       * @function exchanges.list()\n       * @returns {ReturnObject}\n       */\n      list: () => {\n        const path = `/${pathPrefix}/list`;\n        return this._request(path);\n      },\n\n      /**\n       * @description Get exchange volume in BTC and top 100 tickers only for a given exchange\n       * @function exchanges.fetch()\n       * @param {string} exchangeId - (Required) The exchange id (can be obtained from exchanges.all()) eg. binance\n       * @returns {ReturnObject}\n       */\n      fetch: exchangeId => {\n        //Must have exchangeId\n        if (!Utils.isString(exchangeId) || Utils.isStringEmpty(exchangeId)) Utils._WARN_('Invalid parameter', 'exchangeId must be of type: String and greater than 0 characters.');\n        const path = `/${pathPrefix}/${exchangeId}`;\n        return this._request(path);\n      },\n\n      /**\n       * @description Get tickers for a given exchange\n       * @function exchanges.fetchTickers()\n       * @param {string} exchangeId - (Required) The exchange id (can be obtained from exchanges.all()) eg. binance\n       * @param {object} params - Parameters to pass through to the request\n       * @param {number} params.page - Page through results\n       * @param {number} params.coin_ids - Filter tickers by coin_ids\n       * @param {string} params.order [default: trust_score_desc] - Order results by CoinGecko.ORDER.TRUST_SCORE_DESC or CoinGecko.ORDER.VOLUME_DESC\n       * @returns {ReturnObject}\n       */\n      fetchTickers: (exchangeId, params = {}) => {\n        //Must have exchangeId\n        if (!Utils.isString(exchangeId) || Utils.isStringEmpty(exchangeId)) Utils._WARN_('Invalid parameter', 'exchangeId must be of type: String and greater than 0 characters.'); //Convert array to string\n\n        if (Utils.isArray(params['coin_ids'])) {\n          params.coin_ids = params.coin_ids.join(',');\n        }\n\n        const path = `/${pathPrefix}/${exchangeId}/tickers`;\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Get status updates for a given exchange\n       * @function exchanges.fetchStatusUpdates()\n       * @param {string} exchangeId - (Required) The exchange id (can be obtained from exchanges.all()) eg. binance\n       * @param {object} params - Parameters to pass through to the request\n       * @param {number} params.per_page - Total results per page\n       * @param {number} params.page - Page through results\n       * @returns {ReturnObject}\n       */\n      fetchStatusUpdates: (exchangeId, params = {}) => {\n        //Must have exchangeId\n        if (!Utils.isString(exchangeId) || Utils.isStringEmpty(exchangeId)) Utils._WARN_('Invalid parameter', 'exchangeId must be of type: String and greater than 0 characters.');\n        const path = `/${pathPrefix}/${exchangeId}/status_updates`;\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Get volume chart data for a given exchange, returned in BTC\n       * @function exchanges.fetchVolumeChart()\n       * @param {string} exchangeId - (Required) The exchange id (can be obtained from exchanges.all()) eg. binance\n       * @param {object} params - Parameters to pass through to the request\n       * @param {number} params.days - Data up to number of days ago (eg. 1, 14, 30)\n       * @returns {ReturnObject}\n       */\n      fetchVolumeChart: (exchangeId, params = {}) => {\n        //Must have exchangeId\n        if (!Utils.isString(exchangeId) || Utils.isStringEmpty(exchangeId)) Utils._WARN_('Invalid parameter', 'exchangeId must be of type: String and greater than 0 characters.');\n        const path = `/${pathPrefix}/${exchangeId}/volume_chart`;\n        return this._request(path, params);\n      }\n    };\n  }\n\n  /**\n   * @description Calls related to status updates\n   */\n  get statusUpdates() {\n    return {\n      /**\n       * @description List all status_updates with data (description, category, created_at, user, user_title and pin)\n       * @function statusUpdates.all()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {number} params.category - Filter results by CoinGecko.STATUS_UPDATE_CATEGORY[*]\n       * @param {number} params.project_type - Filter results by CoinGecko.STATUS_UPDATE_PROJECT_TYPE[*] (If left empty returns both status from coins and markets)\n       * @param {number} params.per_page - Total results per page\n       * @param {number} params.page - Page through results\n       * @returns {ReturnObject}\n       */\n      all: (params = {}) => {\n        const path = `/status_updates`;\n        return this._request(path, params);\n      }\n    };\n  }\n\n  /**\n   * @description Calls related to events\n   */\n  get events() {\n    const pathPrefix = 'events';\n    return {\n      /**\n       * @description Get events, paginated by 100\n       * @function events.all()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {number} params.country_code - country_code of event (eg. ‘US’). Use events.fetchHistory() for list of country_codes\n       * @param {string} params.type - Type of event (eg.‘Conference’). Use events.fetchTypes() for list of types. Or use CoinGecko.EVENT_TYPE[*]\n       * @param {number} params.page - Page of results (paginated by 100)\n       * @param {boolean} params.upcoming_events_only [default: true] - Lists only upcoming events\n       * @param {string} params.from_date - Lists events after this date yyyy-mm-dd\n       * @param {string} params.to_date - Lists events before this date yyyy-mm-dd (set upcoming_events_only to false if fetching past events)\n       * @returns {ReturnObject}\n       */\n      all: (params = {}) => {\n        const path = `/${pathPrefix}`;\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Get list of event countries\n       * @function events.fetchCountries()\n       * @returns {ReturnObject}\n       */\n      fetchCountries: () => {\n        const path = `/${pathPrefix}/countries`;\n        return this._request(path);\n      },\n\n      /**\n       * @description Get list of event types\n       * @function events.fetchTypes()\n       * @returns {ReturnObject}\n       */\n      fetchTypes: () => {\n        const path = `/${pathPrefix}/types`;\n        return this._request(path);\n      }\n    };\n  }\n\n  /**\n   * @description Calls related to exchange rates\n   */\n  get exchangeRates() {\n    return {\n      /**\n       * @description Get BTC-to-Currency exchange rates\n       * @function exchangeRates.all()\n       * @returns {ReturnObject}\n       */\n      all: () => {\n        const path = `/exchange_rates`;\n        return this._request(path);\n      }\n    };\n  }\n\n  /**\n   * @description Calls related to \"simple\" endpoints\n   */\n  get simple() {\n    return {\n      /**\n       * @description Get the current price of any cryptocurrencies in any other supported currencies that you need\n       * @function simple.price()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {array|string} params.ids - (Required) A single id or a list of coin ids to filter if you want specific results. Use coins.list() for a list of coin ids.\n       * @param {array|string} params.vs_currencies [default: usd] - A single id or a list of ids. Use simple.supportedVsCurrencies() for a list of vsCurrency ids.\n       * @param {boolean} params.include_24hr_vol [default: false] - To include 24hr_vol (true/false)\n       * @param {boolean} params.include_last_updated_at [default: false] - To include last_updated_at of price (true/false)\n       * @returns {ReturnObject}\n       */\n      price: (params = {}) => {\n        //Must be object\n        if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object'); //Check the params.vs_currencies\n        //If is string, ok. If is array, convert to string\n\n        if (Utils.isArray(params['vs_currencies'])) {\n          params.vs_currencies = params.vs_currencies.join(',');\n        } //If no params.vs_currency, set to default: 'usd'\n\n\n        if (!Utils.isString(params['vs_currencies']) || Utils.isStringEmpty(params['vs_currencies'])) {\n          params.vs_currencies = 'usd';\n        } //Check the params.ids\n        //If is string, ok. If is array, convert to string\n\n\n        if (Utils.isArray(params['ids'])) {\n          params.ids = params.ids.join(',');\n        } //Must have params.ids\n\n\n        if (!Utils.isString(params['ids']) || Utils.isStringEmpty(params['ids'])) Utils._WARN_('Invalid parameter', 'params.ids must be of type: String or Array and greater than 0 characters.'); //\n\n        const path = `/simple/price`;\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Get list of supported vs/comparisons currencies\n       * @function simple.supportedVsCurrencies()\n       * @returns {ReturnObject}\n       */\n      supportedVsCurrencies: () => {\n        const path = `/simple/supported_vs_currencies`;\n        return this._request(path);\n      },\n\n      /**\n       * @description Get current price of tokens (using contract addresses) for a given platform in any other currency that you need\n       * @function simple.fetchTokenPrice()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} assetPlatform [default: ethereum] - (Required) Asset platform (only ethereum is supported at this moment)\n       * @param {string|array} params.contract_addresses - (Required) Token’s contract address\n       * @param {string|array} params.vs_currencies - (Required) vs_currency of coins. Use simple.supportedVsCurrencies() for a list of vsCurrency ids.\n       * @param {boolean} params.include_market_cap [default: false] - Include market cap in results or not\n       * @param {boolean} params.include_24hr_vol [default: false] - Include 24hr volume in results or not\n       * @param {boolean} params.include_24hr_change [default: false] - Include 24hr change in results or not\n       * @param {boolean} params.include_last_updated_at [default: false] - Include last updated date in results or not\n       * @returns {ReturnObject}\n       */\n      fetchTokenPrice: (params = {}, assetPlatform = 'ethereum') => {\n        //Must be object\n        if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object'); //Must have assetPlatform\n\n        if (!Utils.isString(assetPlatform) || Utils.isStringEmpty(assetPlatform)) Utils._WARN_('Invalid parameter', 'assetPlatform must be of type: String and greater than 0 characters.'); //Must have contract_addresses, vs_currencies\n\n        if (!params['contract_addresses']) Utils._WARN_('Missing parameter', 'params must include `contract_addresses` and be a of type: String or Object');\n        if (!params['vs_currencies']) Utils._WARN_('Missing parameter', 'params must include `vs_currencies` and be a of type: String or Object'); //If are arrays, convert to string\n\n        if (Utils.isArray(params['contract_addresses'])) {\n          params.contract_addresses = params.contract_addresses.join(',');\n        }\n\n        if (Utils.isArray(params['vs_currencies'])) {\n          params.vs_currencies = params.vs_currencies.join(',');\n        }\n\n        const path = `/simple/token_price/${assetPlatform}`;\n        return this._request(path, params);\n      }\n    };\n  }\n\n  /**\n   * @description Calls related to finance endpoints\n   */\n  get finance() {\n    return {\n      /**\n       * @description List all finance platforms\n       * @function finance.fetchPlatforms()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {number} params.per_page - Total results per page\n       * @param {number} params.page - Page of results (paginated to 100 by default)\n       * @returns {ReturnObject}\n       */\n      fetchPlatforms: (params = {}) => {\n        const path = `/finance_platforms`;\n        return this._request(path, params);\n      },\n\n      /**\n       * @description List all finance products\n       * @function finance.fetchProducts()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {number} params.per_page - Total results per page\n       * @param {number} params.page - Page of results (paginated to 100 by default)\n       * @param {string} params.start_at - Start date of the financial products\n       * @param {string} params.end_at - End date of the financial products\n       * @returns {ReturnObject}\n       */\n      fetchProducts: (params = {}) => {\n        const path = `/finance_products`;\n        return this._request(path, params);\n      }\n    };\n  }\n\n  /**\n   * @description Calls related to index endpoints\n   */\n  get indexes() {\n    const pathPrefix = 'indexes';\n    return {\n      /**\n       * @description List all market indexes\n       * @function indexes.all()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {number} params.per_page - Total results per page\n       * @param {number} params.page - Page of results\n       * @returns {ReturnObject}\n       */\n      all: (params = {}) => {\n        const path = `/${pathPrefix}`;\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Fetch market index by id\n       * @function indexes.fetch()\n       * @param {string} indexId - (Required) The index id (can be obtained from indexes.list())\n       * @returns {ReturnObject}\n       */\n      fetch: indexId => {\n        //Must have indexId\n        if (!Utils.isString(indexId) || Utils.isStringEmpty(indexId)) Utils._WARN_('Invalid parameter', 'indexId must be of type: String and greater than 0 characters.');\n        const path = `/${pathPrefix}/${indexId}`;\n        return this._request(path);\n      },\n\n      /**\n       * @description List market indexes id and name\n       * @function indexes.list()\n       * @returns {ReturnObject}\n       */\n      list: () => {\n        const path = `/${pathPrefix}/list`;\n        return this._request(path);\n      }\n    };\n  }\n\n  /**\n   * @description Calls related to derivative endpoints\n   */\n  get derivatives() {\n    const pathPrefix = 'derivatives';\n    return {\n      /**\n       * @description List all derivative tickers\n       * @function derivatives.fetchTickers()\n       * @returns {ReturnObject}\n       */\n      fetchTickers: () => {\n        const path = `/${pathPrefix}`;\n        return this._request(path);\n      },\n\n      /**\n       * @description List all derivative exchanges\n       * @function derivatives.allExchanges()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} params.order - Order results by CoinGecko.ORDER[*]\n       * @param {number} params.per_page - Total results per page\n       * @param {number} params.page - Page of results\n       * @returns {ReturnObject}\n       */\n      allExchanges: (params = {}) => {\n        const path = `/${pathPrefix}/exchanges`;\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Show derivative exchange data\n       * @function derivatives.fetchExchange()\n       * @param {string} exchangeId - (Required) The exchange id (can be obtained from derivatives.listExchanges()) e.g. bitmex\n       * @param {object} params - Parameters to pass through to the request\n       * @param {boolean} params.include_tickers [default: false] - Include the tickers information\n       * @returns {ReturnObject}\n       */\n      fetchExchange: (exchangeId, params = {}) => {\n        //Must have exchangeId\n        if (!Utils.isString(exchangeId) || Utils.isStringEmpty(exchangeId)) Utils._WARN_('Invalid parameter', 'exchangeId must be of type: String and greater than 0 characters.');\n        const path = `/${pathPrefix}/exchanges/${exchangeId}`;\n        return this._request(path, params);\n      },\n\n      /**\n       * @description List all derivative exchanges name and identifier\n       * @function derivatives.listExchanges()\n       * @returns {ReturnObject}\n       */\n      listExchanges: () => {\n        const path = `/${pathPrefix}/exchanges/list`;\n        return this._request(path);\n      }\n    };\n  }\n\n  /**\n   * @description Build options for https.request\n   * @function _buildRequestOptions\n   * @protected\n   * @param {string} path - Relative path for API\n   * @param {object} params - Object representing query strings for url parameters\n   * @returns {Object} - {path, method, host, port} Options for request\n   */\n  _buildRequestOptions(path, params) {\n    //Stringify object params if exist\n    if (Utils.isObject(params)) params = querystring.stringify(params);else params = undefined; //Make relative path\n    //Check if has params, append accordingly\n\n    if (params == undefined) path = `/api/v${Constants.API_VERSION}${path}`;else path = `/api/v${Constants.API_VERSION}${path}?${params}`; //Return options\n\n    return {\n      path,\n      method: 'GET',\n      host: Constants.HOST,\n      port: 443,\n      timeout: CoinGecko.TIMEOUT\n    };\n  }\n\n  /**\n   * @description Perform https request\n   * @function _request\n   * @protected\n   * @param {string} path - Relative path for API\n   * @param {object} params - Object representing query strings for url parameters\n   * @returns {Promise} Body of https request data results\n   */\n  _request(path, params) {\n    let options = this._buildRequestOptions(path, params);\n\n    return new Promise((resolve, reject) => {\n      //Perform request\n      let req = https.request(options, res => {\n        let body = []; //Set body on data\n\n        res.on('data', chunk => {\n          body.push(chunk);\n        }); //On end, end the Promise\n\n        res.on('end', () => {\n          try {\n            body = Buffer.concat(body);\n            body = body.toString(); //Check if page is returned instead of JSON\n\n            if (body.startsWith('<!DOCTYPE html>')) {\n              Utils._WARN_('Invalid request', 'There was a problem with your request. The parameter(s) you gave are missing or incorrect.');\n            } else if (body.startsWith('Throttled')) {\n              Utils._WARN_('Throttled request', 'There was a problem with request limit.');\n            } //Attempt to parse\n\n\n            body = JSON.parse(body);\n          } catch (error) {\n            reject(error);\n          }\n\n          ; //Create return object\n\n          resolve(ReturnObject(!(res.statusCode < 200 || res.statusCode >= 300), res.statusMessage, res.statusCode, body));\n        });\n      }); //On error, reject the Promise\n\n      req.on('error', error => reject(error)); //On timeout, reject the Promise\n\n      req.on('timeout', () => {\n        req.abort();\n        reject(new Error(`CoinGecko API request timed out. Current timeout is: ${CoinGecko.TIMEOUT} milliseconds`));\n      }); //End request\n\n      req.end();\n    });\n  }\n\n}\n\n; //Set Constants\n\nCoinGecko.API_VERSION = Constants.API_VERSION;\nCoinGecko.REQUESTS_PER_SECOND = Constants.REQUESTS_PER_SECOND;\nCoinGecko.ORDER = Constants.ORDER;\nCoinGecko.STATUS_UPDATE_CATEGORY = Constants.STATUS_UPDATE_CATEGORY;\nCoinGecko.STATUS_UPDATE_PROJECT_TYPE = Constants.STATUS_UPDATE_PROJECT_TYPE;\nCoinGecko.EVENT_TYPE = Constants.EVENT_TYPE;\nCoinGecko.TIMEOUT = Constants.TIMEOUT; //\n\nmodule.exports = exports = CoinGecko;","map":{"version":3,"sources":["/home/vladislav/Dev/node-js/My-projects/crypto-financial-calculator/node_modules/coingecko-api/lib/CoinGecko.js"],"names":["https","require","querystring","Utils","Constants","ReturnObject","CoinGecko","ping","path","_request","global","coins","pathPrefix","all","params","list","markets","isObject","_WARN_","isString","isStringEmpty","vs_currency","isArray","ids","join","fetch","coinId","fetchTickers","exchange_ids","fetchHistory","fetchMarketChart","undefined","days","fetchMarketChartRange","isNumber","fetchStatusUpdates","fetchCoinContractInfo","contractAddress","assetPlatform","fetchCoinContractMarketChart","fetchCoinContractMarketChartRange","exchanges","exchangeId","coin_ids","fetchVolumeChart","statusUpdates","events","fetchCountries","fetchTypes","exchangeRates","simple","price","vs_currencies","supportedVsCurrencies","fetchTokenPrice","contract_addresses","finance","fetchPlatforms","fetchProducts","indexes","indexId","derivatives","allExchanges","fetchExchange","listExchanges","_buildRequestOptions","stringify","API_VERSION","method","host","HOST","port","timeout","TIMEOUT","options","Promise","resolve","reject","req","request","res","body","on","chunk","push","Buffer","concat","toString","startsWith","JSON","parse","error","statusCode","statusMessage","abort","Error","end","REQUESTS_PER_SECOND","ORDER","STATUS_UPDATE_CATEGORY","STATUS_UPDATE_PROJECT_TYPE","EVENT_TYPE","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n//Modules\nconst https = require('https');\nconst querystring = require('querystring');\n\n//Helpers\nconst Utils = require('./helpers/utilities');\nconst Constants = require('./helpers/constants');\nconst ReturnObject = require('./helpers/ReturnObject');\n\n/**\n * @class CoinGecko\n * @author Mark Miscavage <markmiscavage@protonmail.com>\n * @description A Node.js wrapper for the CoinGecko API with no dependencies. For more information, visit: https://www.coingecko.com/api/docs/v3\n * @example\n *     const CoinGecko = require('coingecko-api');\n *     const CoinGeckoClient = new CoinGecko();\n * @public\n * @version 1.0.10\n * @license MIT\n * @kind class\n */\nclass CoinGecko {\n\n  /**\n   * @description Check API server status\n   * @function ping\n   * @returns {ReturnObject}\n   */\n  ping() {\n    const path = `/ping`;\n\n    return this._request(path);\n  };\n\n  /**\n   * @description Get cryptocurrency global data\n   * @function global\n   * @returns {ReturnObject}\n   */\n  global() {\n    const path = `/global`;\n\n    return this._request(path);\n  };\n\n  /**\n   * @description Calls related to coins\n   */\n  get coins() {\n    const pathPrefix = 'coins';\n\n    return {\n\n      /**\n       * @description List all coins with data (name, price, market, developer, community, etc) - paginated by 50\n       * @function coins.all()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} params.order - Order results by CoinGecko.ORDER[*]\n       * @param {number} params.per_page - Total results per page\n       * @param {number} params.page - Page through results\n       * @param {boolean} params.localization [default: true] - Set to false to exclude localized languages in response\n       * @param {boolean} params.sparkline [default: false] - Include sparkline 7 days data\n       * @returns {ReturnObject}\n       */\n      all: (params = {}) => {\n        const path = `/${pathPrefix}`;\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Use this to obtain all the coins’ id in order to make API calls\n       * @function coins.list()\n       * @returns {ReturnObject}\n       */\n      list: () => {\n        const path = `/${pathPrefix}/list`;\n\n        return this._request(path);\n      },\n\n      /**\n       * @description Use this to obtain all the coins market data (price, market cap, volume)\n       * @function coins.markets()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} params.vs_currency [default: usd] - The target currency of market data (usd, eur, jpy, etc.)\n       * @param {array|string} params.ids - List of coin id to filter if you want specific results\n       * @param {string} params.order - Order results by CoinGecko.ORDER[*]\n       * @param {number} params.per_page - Total results per page\n       * @param {number} params.page - Page through results\n       * @param {boolean} params.sparkline [default: false] - Include sparkline 7 days data (true/false)\n       * @returns {ReturnObject}\n       */\n      markets: (params = {}) => {\n        const path = `/${pathPrefix}/markets`;\n\n        //Must be object\n        if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object');\n\n        //If no params.vs_currency, set to default: 'usd'\n        if (!Utils.isString(params['vs_currency']) || Utils.isStringEmpty(params['vs_currency'])) {\n          params.vs_currency = 'usd';\n        }\n\n        //Check the params.ids\n        //If is string, ok. If is array, convert to string\n        if (Utils.isArray(params['ids'])) {\n          params.ids = params.ids.join(',');\n        }\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Get current data (name, price, market, … including exchange tickers) for a coin.\n       * @function coins.fetch()\n       * @param {string} coinId - (Required) The coin id (can be obtained from coins.list()) eg. bitcoin\n       * @param {object} params - Parameters to pass through to the request\n       * @param {boolean} params.tickers [default: true] - Include ticker data\n       * @param {boolean} params.market_data [default: true] - Include market data\n       * @param {boolean} params.community_data [default: true] - Include community data\n       * @param {boolean} params.developer_data [default: true] - Include developer data\n       * @param {boolean} params.localization [default: true] - Set to false to exclude localized languages in response\n       * @param {boolean} params.sparkline [default: false] - Include sparkline 7 days data (true/false)\n       * @returns {ReturnObject}\n       */\n      fetch: (coinId, params = {}) => {\n        //Must have coinId\n        if (!Utils.isString(coinId) || Utils.isStringEmpty(coinId)) Utils._WARN_('Invalid parameter', 'coinId must be of type: String and greater than 0 characters.');\n\n        const path = `/${pathPrefix}/${coinId}`;\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Get coin tickers (paginated to 100 items).\n       * @function coins.fetchTickers()\n       * @param {string} coinId - (Required) The coin id (can be obtained from coins.list()) eg. bitcoin\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} params.page - Page through results\n       * @param {number} params.exchange_ids - Filter tickers by exchange_ids\n       * @param {string} params.order [default: trust_score_desc] - Order results by CoinGecko.ORDER.TRUST_SCORE_DESC or CoinGecko.ORDER.VOLUME_DESC\n       * @returns {ReturnObject}\n       */\n      fetchTickers: (coinId, params = {}) => {\n        //Must have coinId\n        if (!Utils.isString(coinId) || Utils.isStringEmpty(coinId)) Utils._WARN_('Invalid parameter', 'coinId must be of type: String and greater than 0 characters.');\n\n        //Convert array to string\n        if (Utils.isArray(params['exchange_ids'])) {\n          params.exchange_ids = params.exchange_ids.join(',');\n        }\n\n        const path = `/${pathPrefix}/${coinId}/tickers`;\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Get historical data (name, price, market, stats) at a given date for a coin\n       * @function coins.fetchHistory()\n       * @param {string} coinId - (Required) The coin id (can be obtained from coins.list()) eg. bitcoin\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} params.date - (Required) The date of data snapshot in dd-mm-yyyy eg. 30-12-2017\n       * @param {boolean} params.localization [default: true] - Set to false to exclude localized languages in response\n       * @returns {ReturnObject}\n       */\n      fetchHistory: (coinId, params = {}) => {\n        //Must have coinId\n        if (!Utils.isString(coinId) || Utils.isStringEmpty(coinId)) Utils._WARN_('Invalid parameter', 'coinId must be of type: String and greater than 0 characters.');\n\n        //Must be object\n        if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object');\n\n        //If no params.date, set to default today/now\n        if (!Utils.isString(params['date']) || Utils.isStringEmpty(params['date'])) Utils._WARN_('Missing parameter', 'params must include `date` and be a string in format: `dd-mm-yyyy`');\n\n        const path = `/${pathPrefix}/${coinId}/history`;\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Get historical market data include price, market cap, and 24h volume (granularity auto)\n       * @function coins.fetchMarketChart()\n       * @param {string} coinId - (Required) The coin id (can be obtained from coins.list()) eg. bitcoin\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} params.vs_currency [default: usd] - (Required) The target currency of market data (usd, eur, jpy, etc.)\n       * @param {string} params.days [default: 1] - (Required) Data up to number of days ago (eg. 1,14,30,max)\n       * @returns {ReturnObject}\n       */\n      fetchMarketChart: (coinId, params = {}) => {\n        //Must have coinId\n        if (!Utils.isString(coinId) || Utils.isStringEmpty(coinId)) Utils._WARN_('Invalid parameter', 'coinId must be of type: String and greater than 0 characters.');\n\n        //Must be object\n        if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object');\n\n        //If no params.vs_currency, set to default: 'usd'\n        if (!Utils.isString(params['vs_currency']) || Utils.isStringEmpty(params['vs_currency'])) {\n          params.vs_currency = 'usd';\n        }\n\n        //If no params.days, set to default: 1\n        if (params['days'] == undefined) {\n          params.days = 1;\n        }\n\n        const path = `/${pathPrefix}/${coinId}/market_chart`;\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Get historical market data include price, market cap, and 24h volume within a range of timestamp (granularity auto).\n       *   Minutely data will be used for duration within 1 day.\n       *   Hourly data will be used for duration between 1 day and 90 days.\n       *   Daily data will be used for duration above 90 days.\n       * @function coins.fetchMarketChartRange()\n       * @param {string} coinId - (Required) The coin id (can be obtained from coins.list()) eg. bitcoin\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} params.vs_currency [default: usd] - (Required) The target currency of market data (usd, eur, jpy, etc.)\n       * @param {number} params.from - (Required) From date in UNIX Timestamp (eg. 1392577232)\n       * @param {number} params.to - (Required) To date in UNIX Timestamp (eg. 1422577232)\n       * @returns {ReturnObject}\n       */\n      fetchMarketChartRange: (coinId, params = {}) => {\n        //Must have coinId\n        if (!Utils.isString(coinId) || Utils.isStringEmpty(coinId)) Utils._WARN_('Invalid parameter', 'coinId must be of type: String and greater than 0 characters.');\n\n        //Must be object\n        if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object');\n\n        //If no params.vs_currency, set to default: 'usd'\n        if (!Utils.isString(params['vs_currency']) || Utils.isStringEmpty(params['vs_currency'])) {\n          params.vs_currency = 'usd';\n        }\n\n        if (!Utils.isNumber(params['from'])) Utils._WARN_('Missing parameter', 'params must include `from` and be a UNIX timestamp.');\n        if (!Utils.isNumber(params['to'])) Utils._WARN_('Missing parameter', 'params must include `to` and be a UNIX timestamp.');\n\n        const path = `/${pathPrefix}/${coinId}/market_chart/range`;\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Get status updates for a given coin\n       * @function coins.fetchStatusUpdates()\n       * @param {string} coinId - (Required) The coin id (can be obtained from coins.list()) eg. bitcoin\n       * @param {object} params - Parameters to pass through to the request\n       * @param {number} params.per_page - Total results per page\n       * @param {number} params.page - Page through results\n       * @returns {ReturnObject}\n       */\n      fetchStatusUpdates: (coinId, params = {}) => {\n        //Must have coinId\n        if (!Utils.isString(coinId) || Utils.isStringEmpty(coinId)) Utils._WARN_('Invalid parameter', 'coinId must be of type: String and greater than 0 characters.');\n\n        const path = `/${pathPrefix}/${coinId}/status_updates`;\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Get coin info from contract address\n       * @function coins.fetchCoinContractInfo()\n       * @param {object} contractAddress - (Required) Token’s contract address\n       * @param {string} assetPlatform [default: ethereum] - (Required) Asset platform (only ethereum is supported at this moment)\n       * @returns {ReturnObject}\n       */\n      fetchCoinContractInfo: (contractAddress, assetPlatform = 'ethereum') => {\n        //Must have contractAddress, assetPlatform\n        if (!Utils.isString(contractAddress) || Utils.isStringEmpty(contractAddress)) Utils._WARN_('Invalid parameter', 'contractAddress must be of type: String and greater than 0 characters.');\n        if (!Utils.isString(assetPlatform) || Utils.isStringEmpty(assetPlatform)) Utils._WARN_('Invalid parameter', 'assetPlatform must be of type: String and greater than 0 characters.');\n\n        const path = `/${pathPrefix}/${assetPlatform}/contract/${contractAddress}`;\n\n        return this._request(path);\n      },\n\n      /**\n       * @description Get historical market data include price, market cap, and 24h volume (granularity auto) from a contract address\n       * @function coins.fetchCoinContractMarketChart()\n       * @param {object} contractAddress - (Required) Token’s contract address\n       * @param {string} assetPlatform [default: ethereum] - (Required) Asset platform (only ethereum is supported at this moment)\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} params.vs_currency [default: usd] - (Required) The target currency of market data (usd, eur, jpy, etc.)\n       * @param {string} params.days [default: 1] - (Required) Data up to number of days ago (eg. 1,14,30,max)\n       * @returns {ReturnObject}\n       */\n      fetchCoinContractMarketChart: (contractAddress, assetPlatform = 'ethereum', params = {}) => {\n        //Must have contractAddress, assetPlatform\n        if (!Utils.isString(contractAddress) || Utils.isStringEmpty(contractAddress)) Utils._WARN_('Invalid parameter', 'contractAddress must be of type: String and greater than 0 characters.');\n        if (!Utils.isString(assetPlatform) || Utils.isStringEmpty(assetPlatform)) Utils._WARN_('Invalid parameter', 'assetPlatform must be of type: String and greater than 0 characters.');\n\n        //Must be object\n        if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object');\n\n        //If no params.vs_currency, set to default: 'usd'\n        if (!Utils.isString(params['vs_currency']) || Utils.isStringEmpty(params['vs_currency'])) {\n          params.vs_currency = 'usd';\n        }\n\n        //If no params.days, set to default: 1\n        if (params['days'] == undefined) {\n          params.days = 1;\n        }\n\n        const path = `/${pathPrefix}/${assetPlatform}/contract/${contractAddress}/market_chart`;\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Get historical market data include price, market cap, and 24h volume within a range of timestamp (granularity auto)\n       * @function coins.fetchCoinContractMarketChartRange()\n       * @param {object} contractAddress - (Required) Token’s contract address\n       * @param {string} assetPlatform [default: ethereum] - (Required) Asset platform (only ethereum is supported at this moment)\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} params.vs_currency [default: usd] - (Required) The target currency of market data (usd, eur, jpy, etc.)\n       * @param {number} params.from - (Required) From date in UNIX Timestamp (eg. 1392577232)\n       * @param {number} params.to - (Required) To date in UNIX Timestamp (eg. 1422577232)\n       * @returns {ReturnObject}\n       */\n      fetchCoinContractMarketChartRange: (contractAddress, assetPlatform = 'ethereum', params = {}) => {\n        //Must have contractAddress, assetPlatform\n        if (!Utils.isString(contractAddress) || Utils.isStringEmpty(contractAddress)) Utils._WARN_('Invalid parameter', 'contractAddress must be of type: String and greater than 0 characters.');\n        if (!Utils.isString(assetPlatform) || Utils.isStringEmpty(assetPlatform)) Utils._WARN_('Invalid parameter', 'assetPlatform must be of type: String and greater than 0 characters.');\n\n        //Must be object\n        if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object');\n\n        //If no params.vs_currency, set to default: 'usd'\n        if (!Utils.isString(params['vs_currency']) || Utils.isStringEmpty(params['vs_currency'])) {\n          params.vs_currency = 'usd';\n        }\n\n        //If no params.days, set to default: 1\n        if (params['days'] == undefined) {\n          params.days = 1;\n        }\n\n        const path = `/${pathPrefix}/${assetPlatform}/contract/${contractAddress}/market_chart/range`;\n\n        return this._request(path, params);\n      },\n    };\n  };\n\n  /**\n   * @description Calls related to exchanges\n   */\n  get exchanges() {\n    const pathPrefix = 'exchanges';\n\n    return {\n\n      /**\n       * @description List all exchanges\n       * @function exchanges.all()\n       * @returns {ReturnObject}\n       */\n      all: () => {\n        const path = `/${pathPrefix}`;\n\n        return this._request(path);\n      },\n\n      /**\n       * @description List all supported markets id and name\n       * @function exchanges.list()\n       * @returns {ReturnObject}\n       */\n      list: () => {\n        const path = `/${pathPrefix}/list`;\n\n        return this._request(path);\n      },\n\n      /**\n       * @description Get exchange volume in BTC and top 100 tickers only for a given exchange\n       * @function exchanges.fetch()\n       * @param {string} exchangeId - (Required) The exchange id (can be obtained from exchanges.all()) eg. binance\n       * @returns {ReturnObject}\n       */\n      fetch: (exchangeId) => {\n        //Must have exchangeId\n        if (!Utils.isString(exchangeId) || Utils.isStringEmpty(exchangeId)) Utils._WARN_('Invalid parameter', 'exchangeId must be of type: String and greater than 0 characters.');\n\n        const path = `/${pathPrefix}/${exchangeId}`;\n\n        return this._request(path);\n      },\n\n      /**\n       * @description Get tickers for a given exchange\n       * @function exchanges.fetchTickers()\n       * @param {string} exchangeId - (Required) The exchange id (can be obtained from exchanges.all()) eg. binance\n       * @param {object} params - Parameters to pass through to the request\n       * @param {number} params.page - Page through results\n       * @param {number} params.coin_ids - Filter tickers by coin_ids\n       * @param {string} params.order [default: trust_score_desc] - Order results by CoinGecko.ORDER.TRUST_SCORE_DESC or CoinGecko.ORDER.VOLUME_DESC\n       * @returns {ReturnObject}\n       */\n      fetchTickers: (exchangeId, params = {}) => {\n        //Must have exchangeId\n        if (!Utils.isString(exchangeId) || Utils.isStringEmpty(exchangeId)) Utils._WARN_('Invalid parameter', 'exchangeId must be of type: String and greater than 0 characters.');\n\n        //Convert array to string\n        if (Utils.isArray(params['coin_ids'])) {\n          params.coin_ids = params.coin_ids.join(',');\n        }\n\n        const path = `/${pathPrefix}/${exchangeId}/tickers`;\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Get status updates for a given exchange\n       * @function exchanges.fetchStatusUpdates()\n       * @param {string} exchangeId - (Required) The exchange id (can be obtained from exchanges.all()) eg. binance\n       * @param {object} params - Parameters to pass through to the request\n       * @param {number} params.per_page - Total results per page\n       * @param {number} params.page - Page through results\n       * @returns {ReturnObject}\n       */\n      fetchStatusUpdates: (exchangeId, params = {}) => {\n        //Must have exchangeId\n        if (!Utils.isString(exchangeId) || Utils.isStringEmpty(exchangeId)) Utils._WARN_('Invalid parameter', 'exchangeId must be of type: String and greater than 0 characters.');\n\n        const path = `/${pathPrefix}/${exchangeId}/status_updates`;\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Get volume chart data for a given exchange, returned in BTC\n       * @function exchanges.fetchVolumeChart()\n       * @param {string} exchangeId - (Required) The exchange id (can be obtained from exchanges.all()) eg. binance\n       * @param {object} params - Parameters to pass through to the request\n       * @param {number} params.days - Data up to number of days ago (eg. 1, 14, 30)\n       * @returns {ReturnObject}\n       */\n      fetchVolumeChart: (exchangeId, params = {}) => {\n        //Must have exchangeId\n        if (!Utils.isString(exchangeId) || Utils.isStringEmpty(exchangeId)) Utils._WARN_('Invalid parameter', 'exchangeId must be of type: String and greater than 0 characters.');\n\n        const path = `/${pathPrefix}/${exchangeId}/volume_chart`;\n\n        return this._request(path, params);\n      },\n    };\n  };\n\n  /**\n   * @description Calls related to status updates\n   */\n  get statusUpdates() {\n    return {\n\n      /**\n       * @description List all status_updates with data (description, category, created_at, user, user_title and pin)\n       * @function statusUpdates.all()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {number} params.category - Filter results by CoinGecko.STATUS_UPDATE_CATEGORY[*]\n       * @param {number} params.project_type - Filter results by CoinGecko.STATUS_UPDATE_PROJECT_TYPE[*] (If left empty returns both status from coins and markets)\n       * @param {number} params.per_page - Total results per page\n       * @param {number} params.page - Page through results\n       * @returns {ReturnObject}\n       */\n      all: (params = {}) => {\n        const path = `/status_updates`;\n\n        return this._request(path, params);\n      },\n    };\n  };\n\n  /**\n   * @description Calls related to events\n   */\n  get events() {\n    const pathPrefix = 'events';\n\n    return {\n\n      /**\n       * @description Get events, paginated by 100\n       * @function events.all()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {number} params.country_code - country_code of event (eg. ‘US’). Use events.fetchHistory() for list of country_codes\n       * @param {string} params.type - Type of event (eg.‘Conference’). Use events.fetchTypes() for list of types. Or use CoinGecko.EVENT_TYPE[*]\n       * @param {number} params.page - Page of results (paginated by 100)\n       * @param {boolean} params.upcoming_events_only [default: true] - Lists only upcoming events\n       * @param {string} params.from_date - Lists events after this date yyyy-mm-dd\n       * @param {string} params.to_date - Lists events before this date yyyy-mm-dd (set upcoming_events_only to false if fetching past events)\n       * @returns {ReturnObject}\n       */\n      all: (params = {}) => {\n        const path = `/${pathPrefix}`;\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Get list of event countries\n       * @function events.fetchCountries()\n       * @returns {ReturnObject}\n       */\n      fetchCountries: () => {\n        const path = `/${pathPrefix}/countries`;\n\n        return this._request(path);\n      },\n\n      /**\n       * @description Get list of event types\n       * @function events.fetchTypes()\n       * @returns {ReturnObject}\n       */\n      fetchTypes: () => {\n        const path = `/${pathPrefix}/types`;\n\n        return this._request(path);\n      },\n    };\n  };\n\n  /**\n   * @description Calls related to exchange rates\n   */\n  get exchangeRates() {\n    return {\n\n      /**\n       * @description Get BTC-to-Currency exchange rates\n       * @function exchangeRates.all()\n       * @returns {ReturnObject}\n       */\n      all: () => {\n        const path = `/exchange_rates`;\n\n        return this._request(path);\n      }\n    };\n  };\n\n  /**\n   * @description Calls related to \"simple\" endpoints\n   */\n  get simple() {\n    return {\n\n      /**\n       * @description Get the current price of any cryptocurrencies in any other supported currencies that you need\n       * @function simple.price()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {array|string} params.ids - (Required) A single id or a list of coin ids to filter if you want specific results. Use coins.list() for a list of coin ids.\n       * @param {array|string} params.vs_currencies [default: usd] - A single id or a list of ids. Use simple.supportedVsCurrencies() for a list of vsCurrency ids.\n       * @param {boolean} params.include_24hr_vol [default: false] - To include 24hr_vol (true/false)\n       * @param {boolean} params.include_last_updated_at [default: false] - To include last_updated_at of price (true/false)\n       * @returns {ReturnObject}\n       */\n      price: (params = {}) => {\n        //Must be object\n        if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object');\n\n        //Check the params.vs_currencies\n        //If is string, ok. If is array, convert to string\n        if (Utils.isArray(params['vs_currencies'])) {\n          params.vs_currencies = params.vs_currencies.join(',');\n        }\n\n        //If no params.vs_currency, set to default: 'usd'\n        if (!Utils.isString(params['vs_currencies']) || Utils.isStringEmpty(params['vs_currencies'])) {\n          params.vs_currencies = 'usd';\n        }\n\n        //Check the params.ids\n        //If is string, ok. If is array, convert to string\n        if (Utils.isArray(params['ids'])) {\n          params.ids = params.ids.join(',');\n        }\n\n        //Must have params.ids\n        if (!Utils.isString(params['ids']) || Utils.isStringEmpty(params['ids'])) Utils._WARN_('Invalid parameter', 'params.ids must be of type: String or Array and greater than 0 characters.');\n\n        //\n\n        const path = `/simple/price`;\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Get list of supported vs/comparisons currencies\n       * @function simple.supportedVsCurrencies()\n       * @returns {ReturnObject}\n       */\n      supportedVsCurrencies: () => {\n        const path = `/simple/supported_vs_currencies`;\n\n        return this._request(path);\n      },\n\n      /**\n       * @description Get current price of tokens (using contract addresses) for a given platform in any other currency that you need\n       * @function simple.fetchTokenPrice()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} assetPlatform [default: ethereum] - (Required) Asset platform (only ethereum is supported at this moment)\n       * @param {string|array} params.contract_addresses - (Required) Token’s contract address\n       * @param {string|array} params.vs_currencies - (Required) vs_currency of coins. Use simple.supportedVsCurrencies() for a list of vsCurrency ids.\n       * @param {boolean} params.include_market_cap [default: false] - Include market cap in results or not\n       * @param {boolean} params.include_24hr_vol [default: false] - Include 24hr volume in results or not\n       * @param {boolean} params.include_24hr_change [default: false] - Include 24hr change in results or not\n       * @param {boolean} params.include_last_updated_at [default: false] - Include last updated date in results or not\n       * @returns {ReturnObject}\n       */\n      fetchTokenPrice: (params = {}, assetPlatform = 'ethereum') => {\n        //Must be object\n        if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object');\n\n        //Must have assetPlatform\n        if (!Utils.isString(assetPlatform) || Utils.isStringEmpty(assetPlatform)) Utils._WARN_('Invalid parameter', 'assetPlatform must be of type: String and greater than 0 characters.');\n\n        //Must have contract_addresses, vs_currencies\n        if (!params['contract_addresses']) Utils._WARN_('Missing parameter', 'params must include `contract_addresses` and be a of type: String or Object');\n        if (!params['vs_currencies']) Utils._WARN_('Missing parameter', 'params must include `vs_currencies` and be a of type: String or Object');\n\n        //If are arrays, convert to string\n        if (Utils.isArray(params['contract_addresses'])) {\n          params.contract_addresses = params.contract_addresses.join(',');\n        }\n\n        if (Utils.isArray(params['vs_currencies'])) {\n          params.vs_currencies = params.vs_currencies.join(',');\n        }\n\n        const path = `/simple/token_price/${assetPlatform}`;\n\n        return this._request(path, params);\n      },\n    };\n  };\n\n  /**\n   * @description Calls related to finance endpoints\n   */\n  get finance() {\n    return {\n      /**\n       * @description List all finance platforms\n       * @function finance.fetchPlatforms()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {number} params.per_page - Total results per page\n       * @param {number} params.page - Page of results (paginated to 100 by default)\n       * @returns {ReturnObject}\n       */\n      fetchPlatforms: (params = {}) => {\n        const path = `/finance_platforms`;\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description List all finance products\n       * @function finance.fetchProducts()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {number} params.per_page - Total results per page\n       * @param {number} params.page - Page of results (paginated to 100 by default)\n       * @param {string} params.start_at - Start date of the financial products\n       * @param {string} params.end_at - End date of the financial products\n       * @returns {ReturnObject}\n       */\n      fetchProducts: (params = {}) => {\n        const path = `/finance_products`;\n\n        return this._request(path, params);\n      },\n    };\n  };\n\n  /**\n   * @description Calls related to index endpoints\n   */\n  get indexes() {\n    const pathPrefix = 'indexes';\n\n    return {\n      /**\n       * @description List all market indexes\n       * @function indexes.all()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {number} params.per_page - Total results per page\n       * @param {number} params.page - Page of results\n       * @returns {ReturnObject}\n       */\n      all: (params = {}) => {\n        const path = `/${pathPrefix}`;\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Fetch market index by id\n       * @function indexes.fetch()\n       * @param {string} indexId - (Required) The index id (can be obtained from indexes.list())\n       * @returns {ReturnObject}\n       */\n      fetch: (indexId) => {\n        //Must have indexId\n        if (!Utils.isString(indexId) || Utils.isStringEmpty(indexId)) Utils._WARN_('Invalid parameter', 'indexId must be of type: String and greater than 0 characters.');\n\n        const path = `/${pathPrefix}/${indexId}`;\n\n        return this._request(path);\n      },\n\n      /**\n       * @description List market indexes id and name\n       * @function indexes.list()\n       * @returns {ReturnObject}\n       */\n      list: () => {\n        const path = `/${pathPrefix}/list`;\n\n        return this._request(path);\n      },\n\n    };\n  };\n\n  /**\n   * @description Calls related to derivative endpoints\n   */\n  get derivatives() {\n    const pathPrefix = 'derivatives';\n\n    return {\n      /**\n       * @description List all derivative tickers\n       * @function derivatives.fetchTickers()\n       * @returns {ReturnObject}\n       */\n      fetchTickers: () => {\n        const path = `/${pathPrefix}`;\n\n        return this._request(path);\n      },\n\n      /**\n       * @description List all derivative exchanges\n       * @function derivatives.allExchanges()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} params.order - Order results by CoinGecko.ORDER[*]\n       * @param {number} params.per_page - Total results per page\n       * @param {number} params.page - Page of results\n       * @returns {ReturnObject}\n       */\n      allExchanges: (params = {}) => {\n        const path = `/${pathPrefix}/exchanges`;\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Show derivative exchange data\n       * @function derivatives.fetchExchange()\n       * @param {string} exchangeId - (Required) The exchange id (can be obtained from derivatives.listExchanges()) e.g. bitmex\n       * @param {object} params - Parameters to pass through to the request\n       * @param {boolean} params.include_tickers [default: false] - Include the tickers information\n       * @returns {ReturnObject}\n       */\n      fetchExchange: (exchangeId, params = {}) => {\n        //Must have exchangeId\n        if (!Utils.isString(exchangeId) || Utils.isStringEmpty(exchangeId)) Utils._WARN_('Invalid parameter', 'exchangeId must be of type: String and greater than 0 characters.');\n\n        const path = `/${pathPrefix}/exchanges/${exchangeId}`;\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description List all derivative exchanges name and identifier\n       * @function derivatives.listExchanges()\n       * @returns {ReturnObject}\n       */\n      listExchanges: () => {\n        const path = `/${pathPrefix}/exchanges/list`;\n\n        return this._request(path);\n      },\n    };\n  };\n\n  /**\n   * @description Build options for https.request\n   * @function _buildRequestOptions\n   * @protected\n   * @param {string} path - Relative path for API\n   * @param {object} params - Object representing query strings for url parameters\n   * @returns {Object} - {path, method, host, port} Options for request\n   */\n  _buildRequestOptions(path, params) {\n    //Stringify object params if exist\n    if (Utils.isObject(params)) params = querystring.stringify(params);\n    else params = undefined;\n\n    //Make relative path\n    //Check if has params, append accordingly\n    if (params == undefined) path = `/api/v${Constants.API_VERSION}${path}`;\n    else path = `/api/v${Constants.API_VERSION}${path}?${params}`;\n\n    //Return options\n    return {\n      path,\n      method: 'GET',\n      host: Constants.HOST,\n      port: 443,\n      timeout: CoinGecko.TIMEOUT,\n    };\n  };\n\n  /**\n   * @description Perform https request\n   * @function _request\n   * @protected\n   * @param {string} path - Relative path for API\n   * @param {object} params - Object representing query strings for url parameters\n   * @returns {Promise} Body of https request data results\n   */\n  _request(path, params) {\n    let options = this._buildRequestOptions(path, params);\n\n    return new Promise((resolve, reject) => {\n      //Perform request\n      let req = https.request(options, (res) => {\n        let body = [];\n\n        //Set body on data\n        res.on('data', (chunk) => {\n          body.push(chunk);\n        });\n\n        //On end, end the Promise\n        res.on('end', () => {\n          try {\n            body = Buffer.concat(body);\n            body = body.toString();\n\n            //Check if page is returned instead of JSON\n            if (body.startsWith('<!DOCTYPE html>')) {\n              Utils._WARN_('Invalid request', 'There was a problem with your request. The parameter(s) you gave are missing or incorrect.');\n            } else if (body.startsWith('Throttled')) {\n              Utils._WARN_('Throttled request', 'There was a problem with request limit.');\n            }\n\n            //Attempt to parse\n            body = JSON.parse(body);\n          }\n          catch (error) {\n            reject(error);\n          };\n\n          //Create return object\n          resolve(\n            ReturnObject(\n              !(res.statusCode < 200 || res.statusCode >= 300),\n              res.statusMessage,\n              res.statusCode,\n              body\n            )\n          );\n        });\n      });\n\n      //On error, reject the Promise\n      req.on('error', (error) => reject(error));\n\n      //On timeout, reject the Promise\n      req.on('timeout', () => {\n        req.abort();\n        reject(new Error(`CoinGecko API request timed out. Current timeout is: ${CoinGecko.TIMEOUT} milliseconds`));\n      });\n\n      //End request\n      req.end();\n    });\n  };\n};\n\n//Set Constants\nCoinGecko.API_VERSION = Constants.API_VERSION;\nCoinGecko.REQUESTS_PER_SECOND = Constants.REQUESTS_PER_SECOND;\nCoinGecko.ORDER = Constants.ORDER;\nCoinGecko.STATUS_UPDATE_CATEGORY = Constants.STATUS_UPDATE_CATEGORY;\nCoinGecko.STATUS_UPDATE_PROJECT_TYPE = Constants.STATUS_UPDATE_PROJECT_TYPE;\nCoinGecko.EVENT_TYPE = Constants.EVENT_TYPE;\nCoinGecko.TIMEOUT = Constants.TIMEOUT;\n\n//\n\nmodule.exports = exports = CoinGecko;"]},"metadata":{},"sourceType":"script"}